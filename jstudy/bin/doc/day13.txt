# day13

함수(Method, Function)
==> 한가지 작업을 실행하기 위해 만들어진 가장 작은 단위의 프로그램

	프로그램이란??
		함수들이 모여서 원하는 목적을 이루도록 구성하는 것
		
		예 ]
			charAt()	: 한 글자를 알아내느 작업을 실행
			random()	: 난수 하나를 발생시키는 작업을 실행
			
	*****
	참고 ]
		1. 함수는 호출을 해줘야 실행.
		2. 함수는 실행이 완료되면 자신을 호출한곳으로 실행순서를 넘긴다.
		
			예 ]
				class Test {
					void abc(){
						1)
					}
				
				
					public static void main(String[] args){
						2)
						xyz();						
						3)
					}
					
					void xyz(){
						4)
						abc(); // 함수호출
						5)
					}
				}
				
				실행순서 ]
					main함수부터 실행함 2)
					xyz();실행 4)
					abc();실행 1)
					abc();종료 5)
					xyz();종료 3)
					
	함수 만드는 방법]
	
		형식 ]
			
			 System.arraycopy(원본배열, 복사시작위치, 복사본배열, 
			 					채워넣을 시작위치, 채워넣을개수)
			
			[접근지정자] [속성] 반환값타입 함수이름(매개변수리스트) {
				실행내용...
			}
			
			1. 함수이름 
				==> 개발자가 지정하는 사용자 정의어에 해당
				
			2. 매개변수리스트
				==> 변수선언 형태로 만드는 것
					개수는 상관없음. 
					
					예 ]
						void abc(int a, int b){
						
						}
						
						void xyz(int no, char ch, String str){
						}
						
					목적 ]
						이 함수가 원하는 일을 실행하기 위해서 데이터를 기억할 준비를 함
						
					예 ]
						charAt(int pos) ==> 원하는 위치의 문자를 알려주는 함수
											이 함수가 작업을 수행하기 위해선
											위치값이 필수적으로 필요
						
						length()		==> 문자열의 길이를 알려주는 함수
											데이터가 필요하지않음.
											단순히 문자열의 문자개수만 헤아려 알려주면됨.
											
			3. 반환값 타입
				==> 함수는 한가지 목적을 달성하기 위한 가장 작은 단위의 프로그램
					따라서 함수를 실행한다는 것은
					그 목적을 달성해야한다는 것이 될 것
					그 달성된 목적에 따라 결과가 존재해야함
					
					반환값타입이란?
						이처럼 함수에게 뭔가 일을 시켰을 때
						그 함수가 일을 한 결과를 알려주는 것
						==> 경우에 따라 결과가 달라질 수 있음.
							결과는 존재하는 결과 값의 경우에 따라 달라질 것 
							따라서 결과값의 데이터 종류만 선언하면 됨
							
						참고 ]
							함수는 반드시 결과값이 있는 것은 아니다.
							
							출력만 담당하는 함수가 있다면
							이 함수는 출력을 실행하면 목적을 달성함.
							
							이런경우에 반환값 타입을 공란으로 두는게 아니라
							반드시
								"void"
							라고 써줘야한다. 
							
						참고 ]
							함수는 가장 작은 한가지 목적을 위해 만들어지는 프로그램
							따라서 반환값은
							*****
								없거나 한개일 수 있다.
							반환값이 2개 이상인 함수는 절대로 만들어 질 수 없음.
							
							예 ]
							
								int, float abc(){
								}						==> X
								
								해결방법 1 ]
								
									float[] abc(){
										float[] num = new float[2];
										num[0] = 10;
										num[1] = 3.14f;
										
										return num;
									}
									
								해결방법 2 ]
									public class Data01 {
										int no1;
										float no2;
									}
									
								해결방법 3 ]
									Data abc(){
										Data01 d1 = new Data01();
										d1.no1 = 10;
										d1.no2 = 3.14f;
										
										return d1;
									}
									
					결론 ]
						함수는 아래 네가지 형태를 벗어나지 않음
						
							1. void abc(){}
							
							2. int abc(){}
							
							3. void abc(int a){}
							
							4. int abc(int a){}
							
	참고 ]
		return의 의미
		==> 함수 내에서 사용할 수 있는 명령
		
			의미 ]
				1. 현재 실행중인 함수의 실행을 즉시 종료.
				2. 반환값이 있다면 반환해주고 즉시 종료.
				
			형식 1 ]
			
				return;
				
			형식 2 ]
				
				return 데이터;
				
		참고 ]
			반환값이 void인 경우 		반드시 return;만 사용.
			반환값이 void가 아닌경우 	반드시 return 데이터;만 사용.
		
		참고 ]
			반환값이 void인 경우 		return 명령 생략가능.
			
			반환값이 void가 아닌경우 	return 데이터;
-----------------------------------------------------------------------------------------------------		 	
			접근지정자
				
				사용할 수 있는 권한을 지정하는것.
				
				1) public		: 모든곳에서 사용가능
				2) protected		: 같은 패키지, 상속받은 클래스 내에서 사용가능
				3) (생략)		: 같은 클래스, 같은 패키지 내에서는 생략가능
				4) private		: 같은 클래스내에서만 사용가능		
						
-----------------------------------------------------------------------------------------------------		 	
						
함수의 사용방법
==> 함수는 반드시 호출을 해야만 실행됨.						
	
	형식 ]
		함수이름(데이터1, 데이터2, ...);
		
		데이터란?
			함수는 그 함수가 실행되기 위해서 필요한 데이터를 받을 준비(매개변수리스트)를 하고있다.
			함수가 준비하고있는 매개변수리스트에 기억할 데이터를 제공하는것.
			
			데이터는 매개변수의 개수와 형태가 반드시 일치해야한다.
			
								
			참고 ]
				매개변수리스트가 다르다는 것은
				매개변수리스트에 정의한 변수들의 갯수가 다르거나
				타입이 다르거나
				순서가 다르거나 일 것이다.
				
			예 ]
				void abc(int a){
				}
				
				abc(); ==============> X 형태가 다르다.
				abc(5); =============> O
					==> 이때 입력한 정수 5는 매개변수 a에 대입이 되서 
						함수 내부에서 처리될 것이다.
						int a;
						
						abc(5); ===> a = 5;
				abc(2, 4); ==========>  X 갯수가 다르다.
				abc(3.14); ==========> X 형태가 다르다.
				
			예 2]
				void efg(double no){
				}
				
				efg(); ===============> X
				efg(3.14); ===========> O
				efg(3.14, 10.) =======> X 
				efg(10); =============> O
					==> double no;
						efg(10) ===> no = 10;
						
			예 3 ]
				
				double hij(){
					return 10; 
					===============> 반환값 타입 double이 반환해주는 데이터의 형태보다 크기때문에 자동 형변환된다.
				}
				
				Object lmn(){
					return new int[]{1,2,3}; =====> O
				}
				
				
------------------------------------------------------------------------------------------------
반환값 사용 방법
==> 함수는 실행이 종료되면 반환값을 줄 수 있다.
	이 반환값은 함수 호출 부분에 그대로 들어가게 된다.
	
		int getTen(){
			return 10;
		}
		라고 정의된 함수가 있는 경우
		
		int num = getTen();
		==> int num = 10;
		
	그러므로 함수 호출 부분에 예상되는 반환값을 기록해 보아서
	문법적으로 이상이 없으면 그것이 반환값의 사용이 된다.
	
	참고 ]
		반환값이 있는 함수라도
		필요하지 않는다면 반환값을 이용하지 않아도 상관없다.
		
=================================================================================================
*****
함수 제작 위치
==> 자바에서 함수를 만드는 위치는
	반드시 클래스 블럭에 만들어야 한다.
	다른 곳에서는 절대로 만들 수 없다.						
						
						
						
						