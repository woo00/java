#day03

상수와 변수
	
	1. 상수	: 변하지않는 값, 수정불가능한 변수
		==> 개발자가 프로그램에게 알려주는 데이터(정보)
			리터럴이라고 표현
			
			이 리터럴들은 "리터럴 풀"이라는 메모리에 저장한 후 사용됨
			
			예 ] 
				System.out.println("Hello"); 라고 명령하면
				==>
					1) "Hello" 데이터를 리터럴풀에 저장
					2) 리터럴풀에 있는 데이터를 출력
				
			종류 ]
				1) 정수형	: 일반적인 소수점이 없는 수
					
					10		: 10진수
					010		: 8진
					0x10	: 16진수
					
					예 ] 
						int a = 10;		10을 의미
						int a = 0x10;	16을 의미
						
				2) 실수형	: 소수점이 있는 
					3.14	== 일반적인 소수방식
					3.0e5	== 지수방식
								==> 3.0 * 10^5(10의 5승)의 의미
					0.25e-7	== 0.25* 10^-7(10의 -7승) == 0.25*(1/10000000)
				3) 논리형	: 참과 거짓을 의미하는 데이터
					true, false만 사용할 수 있음
					==> 이외 데이터는 절대 사용불가
					
					boolean bool = true;
					
				4) 문자형	: 오직 한 글자로만 구성된 문자데이터
					==> 자바의 경우 입력한 문자를 UNI CODE 방식으로 변환해서 기억.
					
					'a' ==> 97이 됨.
					'\u0000'	:	실제 유니코드의 코드값을 이용해서 기억시킬 수 있다.
					
				5) 문자열형	: 한 글자 이상으로 구성된 문자
					==> 이 타입은 기본 상수는 아니다.
						개발자 입장에서 매우 빈번하게 사용하는형태
						자바에서도 기본타입처럼 사용할 수 있도록 편의성제공
						
		2. 변수
		
			변수의 필요성
				입력한 데이터는 리터럴풀에 저장됨
				프로그램이 리터럴풀에 있는 데이터를 사용
				
				리터럴풀은 주소를 모르면 사용불가
				
				변수는 리터럴풀에 저장된 데이터를 개발자가 사용가능하도록 주소를 기억하는 방법
				
				개발자가 쉽게 사용가능한 영역은 stack 영역.
				따라서 stack으로 데이터에 주소를 기억시켜 사용
				
				참고 ]
					Stack 영역의 특징
					1. 메모리에 별칭을 붙여 사용가능
						(별칭은 개발자가 정함
							개발자가 손쉽게 사용가능)
					2. 8개의 영역 중 리터럴풀 다음으로 가장 작은 영역
						==> 많은 양의 데이터를 보관하면 문제발생
				
				리터럴풀에 있는 데이터를 Stack에 기억시키는 방법
				
					1. Stack에 필요한 메모리를 할당받는다.
						형식 ]
						
							데이터타입 변수이름 ;
							
							예 ] int no;
								
						참고]
							변수이름은 Stack에 붙이는 별칭
							변수이름만 기억하고있으면 언제든지 사용가능.
							
					2. 대입 연산자를 이용해서 필요한 데이터의 주소 기억
						
						형식 ] 
							변수이름 = 데이터;
							
							예 ] no = 10;
							
						참고 ] 
							Stack 영역에 메모리를 할당받는 방법
								JVM에게 할당받을 
									메모리크기와 
									저장할 데이터의 형태를 
								알린다.
							
							데이터의 형태
							
								1) 논리형
									boolean		-1byte
									
								2) 문자형
									char		-2byte
									
								3) 정수형
									byte		-1byte
									short		-2byte
									int			-4byte
									long		-8byte
									
								4) 실수형
									float		-4byte
									double		-8byte
									
								5) 문자열형
									String		-정할 수 없음
									
						예 ]
							정수를 기억한 메모리 할당받기
							
								int no; 	변수 선언
								no = 10; 	리터럴 풀에 데이터를 기억시키고
											기억된 공간의 주소를 no라는 변수에 기억시킨다.
											변수 초기화
											
								no라는 별칭을 이용하여 그 안에 있던 데이터를 사용가능
	-------------------------------------------		-------------------------------------------		-------------------------------------------									
					참고 ] 
					
						변수의 종류
							1. 기본형변수
							2. 참조형변수
								예 ]
									
									public class Box {
										int no;
										public void abv(){};
									}
									
									Box b1 ;
									b1 = new Box();
									
									b1.no;
									b1.abc();
											
											
-------------------------------------------------------------------------------------		-------------------------------------------								

	형변환(Casting)
	==> 데이터의 형태는 필요에 따라 다른형태로 변환시켜 사용가능
	
		예 ]
			int no = (int)3.14;							
			
			
		방법 ]
			1. 자동형변환
			==> 지정하지 않아도 자동적으로 형태를 바꿔서 사용됨
			
				발생하는경우
				==> 작은형태의 데이터가 큰 형태의 데이터로 필요한 경우 자동형변환 발생
				
			2. 강제형변환
			==> 자동형변환이 불가능한 경우
				경우에 따라 개발자가 강제로 형변환을 요구할 필요가 있다.
				
				형식]
					(변환할 타입) 데이터;
					
					예 ]
						float b= (float)10.;
				참고 ]
					강제형변환을 하면 데이터가 손실될 위험이 있음
					
			3. 리터럴형변환
			==> 리터럴풀의 메모리크기를 원하는 크기로 변경
				
				참고 ]
					리터럴풀은 데이터의 기본형으로 결정
					
					예 ] 
						정수	4byte
						실수	8byte
					형식 ]
						데이터F | f ==> 리터럴풀의 크기를 4byte로 만드세요.
						
						데이터L | l ==> 리터럴풀의 크기를 8byte로 만드세요.
							
			