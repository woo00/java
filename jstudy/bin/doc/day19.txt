# day19

LinkedList
==> 내부적으로 이중 연결 리스트 방식으로 데이터를 보관하는 컬렉션의 일종

	장점 ]
		데이터를 중간에 끼워넣기 작업, 삭제 작업은 속도가 빠르다.
	단점]
		데이터 누적 작업은 속도가 느리다.
		
	주로 데이터의 변화가 심한 경우에 많이 사용되는 컬렉션.

-------------------------------------------------------------------------------------

참고 클래스 ]

	Iterator
	==> 컬렉션은 많은 클래스의 집합이고 그 형태도 다르다. 그런데 이들은 혼용될 수 있다.
		이 때, 그 안에 기억된 데이터를 꺼내는 방식은 약간씩 다르다.
		
		List의 경우는 데이터를 꺼내는 함수가 있지만
		Set은 없음.
		
		이때, Set에 기억된 데이터를 꺼내야 하는 경우는
			1.List로 변환해서 사용
			2.Iterator로 변환해서 사용
			
		Set의 경우는 데이터를 나름대로의 방식으로 정렬해서 기억시키고
		개발자는 데이터가 기억된 위치를 알 수 없기 때문에
		데이터를 꺼낼 수 없게된다.
		
		이런경우는 데이터를 순차적으로 꺼낼 수 있는 것으로 바꿔서 꺼내줘야함.
		
		이런경우를 위한 클래스가 Iterator.
		
		따라서 Set에 기억된 데이터들을 순차적으로 꺼낼 수 있도록 변환하는 방법이
			Set.iterator()
		이고 반환값은 Iterator 타입.
		
		특징 ] 
			순차적으로만 꺼낼 수 있고 한 번 꺼낸 데이터는 자동 삭제됨.
			
-------------------------------------------------------------------------------------
			
Collections 클래스
==> 이름은 컬렉션이지만 컬렉션이 아님
	컬렉션을 이용할 때 필요한 부가적인 기능을 제공하는 유틸적인 클래스.
	
	주의 ]
		함수의 매개변수가 List로 정의되어있으면
		List를 만드는 것이 아니고
		List계열의 데이터를 넘겨주면 된다.
		<===
			void abc(Object o){}
			==> 이 함수의 경우
				어떤 데이터를 입력할 수 있지만
				입력된 데이터는 object타입으로 자동 형변환된다.
				
				예 ]
					String str = "jennnie";
					abc(str);
					==>
						Object o = str;
						<== String -------> Object 자동형변환됨.
					
					ArrayList list = new ArrayList();
					list.add(1);
					list.add("abc");
					list.add(3.14); 
					// 입력된 데이터가 Object 타입으로 자동 형변환되어서 기억되기 때문
					
				정리 ]
					매개변수에 상위 클래스 타입의 변수가 선언되어있으면
					하위클래스 타입의 데이터가 입력되는 순간 상위 클래스타입으로 자동 형변환이 된다.
					
			List 데이터를 입력해달라는 함수는 List계열 데이터를
			Set데이터를 입력해달라는 함수는 Set계열 데이터를 
			Collection 데이터를 입력해달라는 함수는 List || Set 계열 데이터를
			Map 데이터를 입력해달라는 함수는 Map계열 데이터를 
		입력해주면 된다.
		
		참고 ]
			일반적인 정렬은 오름차순 정렬을 하게됨.
			만약 정렬방식을 변경하고자 한다면
				sort(List list, Comparator c)
			를 사용하면 된다.