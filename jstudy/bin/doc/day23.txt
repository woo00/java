# day23

예외처리
==> 프로그램적으로 문제가 없으나(문법상 에러가 없음)데이터의 문제나 장비의 문제로 인해서
	프로그램을 실행하는 중 발생하는 에러를 
		"실행에러(Run Time Error)"
	라고하고 자바에서는 "예외(Exception)"라고 한다.
	
	문제는 이런 예외는 개발자가 예측해서 대처해야하고 
	이런 방식의 프로그램을 "예외처리" 라고한다.
	
	예외발생 원인을 개발자가 알고있어야하는데 이런 문제점을 해결하기 위해
	예외처리문법이 제공된다.
	
	형식 ] 
		(1)
		try{
			(2)
			실행명령 //  예외가 발생할 위험요소가 존재하는 부분
			(3)
		}catch(????){
			(4)
		}finally{
			(5)
		}
		(6)
		
		실행순서 ]
			
			예외가 발생한 경우	: 1 - 2 - 4 - 5 - 6
			예외가 없는 경우	: 1 - 2 - 3 - 5 - 6
		
		주의 ]
			3번의 경우 예외가 발생하는 경우 실행되지 않음. 
			try블럭의 범위에 따라 실행이 될 수 있고 안될 수있다.
			
			예 ] 
				try {
					파일을 오픈 ---> 파일이 없으면 에러발생
				}
				이 부분에서 파일읽기를 시도해도 에러발생
				
				해결방법==>
				try {
				파일 오픈 
				파일 읽고
				
				파일내용 출력
				} catch(?????){}
				
	자바의 예외처리 원리
		예외가 발생하면 JVM은 발생한 예외의 종류를 분석한 후
		예외에 대한 정보를 객체로 만들어서
		catch블럭에 그 객체의 주소를 전달함.
		
	catch의 의미 
	==> 예외가 발생하면 그 예외의 정보를 받아서
		개발자가 그정보를 이용해서 원하는 처리를 해줘야한다.
		
	다중 catch
	==> try블럭 안에 예외발생 요소가 여러 복합적인 예외발생 요소를 가질 수 있다.
	
		이 때 반드시 어떤 에러때문인지 구분해야 하는 경우를 
		대비해서 만들어 놓은 방법이 다중 catch이다 		
		
		형식 ] 
		
			try {
			} catch(????){
			} catch(????){
			} catch(????){
			...
			} finally {
			}
			
			주의 ] 
				다중캐치를 사용하는 경우
				반드시 캐치블럭이 실행될 수 있는 함수로 나열해야함
		
				if(age > 10){
					gen = "10대"
				} else if(age > 20){
					gen = "20대
				}...
		
	finally 블럭
	==> 예외발생 여부에 상관없이 
		반드시 실행되어야 할 작업이 존재할 경우 입력하는 블럭
		
		형식 ]
		try{
		}catch(???){
		}finally{
			==> 
			이 곳의 문장은 어떤 경우에도 반드시 실행되는 문장임.
		}	
		
예외정보 출력
==> 
	1. 예외 정보 클래스의 변수를 출력
	==> 예 ] System.out.println(예외정보클래스변수(예 ] e));
		==> 예외의 원인 파악 가능
		
	2. 예외변수.printStackTrace() 함수 이용
		==> 예외의 원인 + 예외의 위치 & 경로 추적해서 출력
		
	
	예외가 발생하면 개발자가 그것을 수정해서 정삭적으로 동작하도록 만드는 행위가 
		예외처리
	이다.
	
	예외처리의 목적은 프로그램의 정상적인 종료
	
	그런데 정상적으로 동작하도록 만드는 작업은 매우 어려운 일이고 경우도 많지않다.
	
	다만, 예외처리를 하는 실제 이유는 
	예외의 정보를 알아서 사용자에게 
	왜 프로그램에 문제가 생겼는지 알려주고 
	그 프로그램을 정상적으로 종료하도록 하는것에 의의를 둔다.
	
예외 전이하기
==> 함수는 프로그램의 가장 작은 단위로 
	한 가지 작업을 하기위해 만든 것.
	
	함수는 예외를 전이하도록한 경우가 있다.
	
	형식 ] 
		public service void hamsoo() throws 예외클래스1, 예외클래스2{
		
		}
	
	의미 ]
		지정한 예외가 발생하면
		이 함수는 실행해도 의미가 없으므로 중지시킨다.
	
	*****
	예외가 전이된 함수를 호출해서 사용하는 곳에서 반드시 예외처리를 해줘야함.
	
		예 ]
		
			public void abc() throws FileNotFoundException{
				예외발생
				
				반드시 해줘야하는 작업...의 경우는 반드시 전이없이 예외처리가 필요하다
			}
			==>
			이 함수를 사용하는 쪽에서는
			
			try{
				abc();
			}catch(FileNotFoundException e) {
				e.printStackTrace();
			}
			
			의 형식으로 예외처리를 해줘야한다.
			
			public void def() throws FileNotFoundException{
				abc();
			}
			
	참고 ]
		함수가 예외를 전이하는 함수라도 
		예외처리를 하지 않아도 되는경우.
		
		전이하는 예외가 RunTimeException 소속인 경우는
		예외처리를 해도 그만, 안해도 그만임. (주로 java.lang 소속클래스에 많이 존재함)
		하지만 해주는것이 좋다~ ㅎㅎ;
		
강제 예외전이
==> JVM은 예외로 인정하지 않는데 (==>예외처리가 필요없음)
	프로그램의 목적상 예외로 인정해야 하는 경우가 있다.
	
	예 ] 부서번호 50번 부서를 입력해야하는데 예외처리로 가능함
			
		형식 ] 
			throw new 예외클래스();
			
		주의 ]
			예외전이		: throws 예외클래스,...
			강제 예외전의	: throw new 예외클래스();		
			
사용자 예외클래스 만들기
==> 예외클래스는 예외의 발생원인을 알려주는 역할.
	
	강제 예외전이는 자바가 준비한 예외가 아니므로
	예외원인을 파악하는데 어려움이 있다.
		
	사용자가 예외정보를 만들어주는 클래스를 만들어사용가능
	
	방법 ]
	1. Exception 클래스를 상속받는 클래스생성
	2. toString()를 오버라이드 하여 예외의 원인을 출력할 수 있게 한다.

===========================================================================================

어플리케이션 설계 ]
	문항당 10점 

데이터베이스 구현 ]
	1. ER Model Diagram		20
	2. ERD					30
	3. 테이블명세서			30
	4. DDL명령 				20	
		
===========================================================================================		
		
네트워크 프로그래밍 구현
	ajax
		javascript
		servlet
		dao
		실행화면
		
통합구현	
	jdbc		
		SmartJDBC
		controller
		doa
		sql		
		
		
		
		
		
		
		