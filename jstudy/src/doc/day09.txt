#day 09


	우리가 기억해야할 메모리공간
	
	1. Literal pool
		==> 입력하는 데이터 자체(Literal)가 모여있는 공간
			
	2. Stack
		==> 함수내에서 만들어지는 변수들이 생성되는 메모리공간
			함수실행이 종료되면 즉시 삭제하는 것이 특징
			
	3. Heap
		==> 인스턴스들이 올려지는 공간
			프로그램이 종료돼도 계속 남아있음.
			==> 사용하지 않는 인스턴스들을 정리해서 삭제해주는 장치가 가비지콜렉터이다.
			
		인스턴스가 heap에 올려지는 순간
			new 명령이 실행될 때 
			
	4. Static
		==> 프로그램이 실행되는 순간 static 멤버들을 먼저 static영역에 올려놓고 실행.
			따라서 
				같은 이름으로 두 번 올려놓지 않는다.
				여러 곳에서 사용한다면 공유해서 사용하게된다.
				
				
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

continue
==> for, while, do~while 에서만 적용됨.
	현재 반복을 중지하고 다음 반복을 처리하도록하는 명령
	
	주의사항 ]
		다음 실행 부분이 조금씩 명령에 따라서 달라지는데 
		
		1) for 
			
			for(;;){
				
				continue;
			}				
			
		2) while
			while(){
				
				continue;
			}
			
		3) do~while 
		
			do{
				
				continue;
				
			}while();
			
	참고 ] 
		continue 명령도 break와 마찬가지로 		
		레이블을 붙여서 사용할 수 있고
		그 명령이 속한 block를 대상으로 작업을 수행한다.	
			
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

배ㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐㅐ여ㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㅕㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹㄹ
==> 같은 형태의 데이터를 모아서 
	한꺼번에 관리하는 방식
	
	많은 데이터를 관리하는 경우 원칙적으로 데이터 갯수만큼 변수를 만들어야한다.
	이 때 변수를 만들 때나 데이터를 하용할 때 불편함이 발생한다.			
	
	이런 문제를 해결하기 위한 방법으로 제시된 것이 배열.			
	
	즉, 배열이란?
	하나의 변수를 이용해서 여러개의 데이터를 관리하는 방법.
	
	참고 ]
		자바에서의 변수 형태
		1. 기본형태 (Primitive Type, Value Type)
			==> 변수에 기억된 내용이 데이터 자체의 주소를 기억
				따라서 변수를 찾으면 데이터에 바로 접근이 가능.
				
				8가지 기본데이터 타입으로 만들어진 변수
				(boolean, char, byte, short, int, long, float, double)
					1		2	1		2	 4		8	 4		8	
				
		2. 참조형 (Reference Type, 주소타입)		
			==> 변수에 기억된 내용이 인스턴스의 주소를 기억
				변수를 찾으면 데이터가 기억되어있는 인스턴스의 주소를 알려준다.
			
				기본데이터 타입 이외의 모양으로 만들어진 모든 변수(== 클래스타입)
				
	참고 ] 
		heap 영역
			특징
				1. 반드시 주소를 알아야 사용할 수 있는 영역
				2. 8가지 영역중에서 크기가 가장 큰 영역이고 확장도 가능
				(부족하면 스스로가 다른 영역을 빼앗아서 heap 영역으로 사용할 수 있음)
				==> 따라서 자바는 많은 양의 데이터가 필요하면 heap에 기억되도록 함.
				3. 원칙적으로 한 번 만들어지면 그 프로그램이 종료될 때 가지 없어지지 않는 영역.
				4. heap영역에 생기는 메모리는 자동 초기화 됨.
				
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			
배열을 만드는 방법

	1. 배열은 원칙적으로 데이터가 기억될 공간을 heap에 만들어야 한다.
	
		명령어 ]
			new 데이터타입[기억할 갯수];			
			
			==> 데이터타입 : heap에 만들 데이터 영역의 형태를 지정
				사용할갯수 : heap에 만들 데이터 영역의 갯수를 지정
			
			 예	]
			 
			 	new int [10];
			 	==> heap영역에 int형 데이터를 기억할 메모리공간을 10개 만들어라.
			 	
			 	new String[3];
			 	==> heap 영역에 String타입 데이터를 기억할 메모리 공간을 3개 만들어라.
			
	2. heap에 있는 메모리의 주소를 기억할 변수를 만들어야 한다.
	
		명령어 ]
			데이터타입[]	변수이름;
				
				데이터타입[] : 자신이 관리할 heap영역에 있는 실제 데이터 형태에 따라 달라진다.
			
				***
				결론적으로 heap type이 같은 주소만 기억할 수 있다.
			
			예 ] 
				int[] no = new float[5]; // 불가능 heap type이 다르기때문			
			
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			
배열 사용방법

	형식 ] 
		변수 [위치값];
		
		참고 ] 위치값은 0부터시작.
		
참고 ]
	배열주소.length
	==> 배열주소가 관리하는 곳에 있는 메모리의 갯수를 알려주는 명령
	
	예 ]
	int[] num = new int[10];
	
	System.out.println(num.length); ==> 10을 출력.
	
참고 ]
	배열의 초기화
	==> 배열 메모리는 heap에 생기므로 자동으로 초기화가 이루어진다.
	
	정수 	: 0
	실수 	: 0.0
	논리 	: false
	문자 	: 아스키코드값 0
	
	클래스 	: NULL
	
	경우에 따라 배열메모리에 강제로 특정값을 입력할 필요도 있다.
	==> 배열의 초기화 라고 표현.
	
	형식 ]
		int[] no = {1,2,3,4,5};
		int[] no = new int[]{1,2,3,4,5};
	
	***
	주의 ]
		배열을 초기화 할 경우에는 배열의 크기 입력불가.
		대신 초기화 데이터를 이용해서 자동으로 배열의 크기가 결정됨.
		
참고 ]
	Arrays.toString()
	==> 배열을 출력하기 위해서는
		for 명령 등 반복 명령을 이용해서 출력하는것이 원칙이지만 단순히 내용확인만을 위한 목적이라면 불편;
		
		배열이 가진 모든 데이터를 문자열로 변환해서 출력하는 함수
		오직 중간확인을 위한 목적 