# day22

Properties
==>Map의 역할을 하는 클래스

	일반 Map과 차이점은 파일(외부장치)을 이용해서 직접 데이터를 읽어서
	Map처럼 저장가능,
	Map에 저장된 데이터를 직접 파일 (외부장치)로 출력해서 저장가능.
	
	주의사항 ]
		파일내용을 읽을 때 인코딩 안됨.
		==>한글 파일의 경우 파일자체에서 인코딩하지 않으면 
			내용이 한글인 경우 텍스트가 깨져서 읽어짐.
	
	참고 ]
		한글이 포함된 파일을 Properties에서 사용하기 위해서 인코딩 시키는 방법
		
		1.cmd창
		2.path를 자바 Home으로 잡아준다.
		3.native2ascii 기능을 이용해서 인코딩
		
			형식 ]
				native2ascii	현재파일	새로운파일
				
				예 ]
				
					native2ascii	d:\sample.txt	d:\sampl_ko.txt
					
	참고 ]
		Properties 클래스는 오직 String으로만 키값과 데이터를 처리해야한다.
		
	참고 ]
		Properties는 현재 프로그램의 정보를 Map으로 자동 처리하는 기능을 가지고있음.
		
-------------------------------------------------------------------------------------------------
제너릭스(Generics)
==> 컬렉션은 모든 형태의 데이터를 모두 입력받아 기억할 수 있다.
	하지만 실제 사용할 땐 한 가지 형태로 입력받는 것이 원칙.
	꺼낼 땐 항상 형변환해서 꺼내야함.
	즉, 나는 한 가지 형태로 결정해서 데이터를 입력했는데
	꺼낼 땐 자동 형변환이 되지 않기때문에 
	항상 강제 형변환해야함.
	
	제너릭스란
	==> 컬렉션에 입력하는 데이터를 미리 알려줌으로써
		나중에 꺼내서 사용할 때 더 편하게(형변환없이) 꺼내서 사용할 수 있도록 해줌.
		
		형식 ] 
		
			ArrayList<String> list = new ArrayList<String>();
			
		참고 ]
			제너릭스는 전파되지 않기때문에 반드시 컬렉션마다 모두 제너릭스 선언을 해줘야함
			
			하나의 컬렉션이 제너릭스 선언되었더라도 
			그 컬렉션을 이용하는 다른 컬렉션은 제너릭스를 잊어버림.
			
			새로운 컬렉션도 다시 제너릭스 선언을 해줘야함.
			
		참고 ]
			특수한 제너리스
				원래 제너릭스는 특정 클래스만 입력받을 목적으로 사용됨.
				
				형식 ]
					<? super 클래스이름>
					==> 지정한 클래스포함 상위클래스까지 허락함.
					
					<? extends 클래스이름>
					==> 지정한 클래스포함 하위클래스까지 허락함.
					
				이 방법은 제너릭스 선언을 하지 않은 것과 동일한 효과가 있다.
			
--------------------------------------------------------------------------------------------------
어노테이션
==> 내부적으로 약속된 실행을 자동으로 처리하도록 하는 명령의 일종
	주로
		화면에 실제 보이는 실행이 아니고
		점검이나 선언적인 실행(이 클래스는 어떻게 동작되어야 합니다..)
		의 의미를 가진 명령을 말한다.
		
	형식 ]
		@명령
		
--------------------------------------------------------------------------------------------------


































