# day07

3. switch ~ case
	==> 다중 조건처리 명령
		여러개의 조건을 차례로 처리할 수 있는 조건명령
		
		형식 ] 
			switch(변수||연산식){
			case	데이터1 :
				실행내용1
				break;
			case	데이터2 :
				실행내용2
				break;
			...
			default:
				처리내용n
			}
			
		해석 ] 
			변수||연산식이 
						데이터1과 같으면 실행내용1을 실행,
						데이터2와 같으면 실행내용2를 실행,
						...
						그 외의 내용은 처리내용n을 실행.
		
		*****				
		참고 ] 
			1. 비교방식은 묵시적으로 동등비교(==) 처리를한다.
				( ==> 크다, 작다 의 대소비교는 할 수 없음)
			
			2. 앞 case에서 참이어도 다음case를 질문하게 된다.
				==> break 명령을 사용해야함.
			3. 앞 case와는 묵시적으로 OR 연산을 한다. 
			
		참고 ]
			break 명령
			==> switch ~ case, for, while, do ~ while, forEach 등 반복문에서만 사용되는 명령
				해당 명령의 block을 벗어나도록 (명령을 즉시 중지시키도록) 하는 명령
				
=====================================================================================================================================================

반복 제어 명령

	while 명령
	==> 조건식을 제시한 후
		그 조건이 참이면 지정한 내용을 반복하도록 하는 명령
		
		형식 ] 
			while(조건식){
				실행내용
			}
		해석 ]
			조건식이 false가 될 때 까지 조건식과 실행내용을 반복해서 실행한다. 거짓이라면 종료한다.
			
		참고 ] 
			이 명령은 선조건 처리명령이다. 
			==> 최악의 경우 (처음 조건이 false인 경우)
				실행내용을 실행하지 않을 수 있다.
		
		참고 ]
			while 명령은 횟수를 제어할 카운터변수가 형식에 포함되지 않음
			따라서 횟수를 제어하려면 카운터변수를 먼저 정의해 놓고
			블럭내부에서 증감해서 처리		
---------------------------------------------------------------------------------------------------------------------------------------------------
do ~ while 반복문
==> 후조건 처리명령으로 
	최악의 상황이더라도 한 번은 실행내용을 실행.
	
	형식 ]
	do{
		실행내용
	}while(조건식);
	
	해석 ]
		실행내용 실행 후 조건식을 읽고 참일경우 조건식이 false 일 때 까지 실행내용과 조건식을 반복한다.
---------------------------------------------------------------------------------------------------------------------------------------------------
for 명령
==> while과 마찬가지로 특정조건이 참이면 반복하도록 하는 반복명령

	차이점 ] 
		형식내부에 횟수를 제한할 카운터변수를 만들고 제어하는 부분이 포함.		
	
	형식 ]
		for(카운터변수선언 & 초기화 ; 조건식 ; 증감){
				실행내용
		}
		
	해석 ]
		카운터변수&초기화 한 내용으로 조건식을 읽고 참일경우 실행내용을 읽고 증감하고 조건식이 false일때까지 반복한다.	
		
	참고 ] 카운터 변수 & 초기화는 한 번만 실행한다.
			따라서 카운터변수를 초기화하는 목적으로 사용한다.
			
			증감식은 반복횟수만큼 동일한 횟수로 반복한다.
			카운터를 증감 시키는 목적으로 사용한다.
			
	참고 ]
		for명령도 선조건 처리명령이다.
		==> 조건식이 거짓일경우 실행내용을 실행하지 않을 수 있다.
	
	참고 ]
		for(;;) 안의 내용은 필요하지 않으면 생략해도 무방하다.
		만약 두번째 부분이 생략되면 항상 true로 판정해서 처리.
		
	참고 ]
		지역변수
		==> 해당 변수가 만들어진 블럭에서만 사용할 수 있는 변수
			
			변수는 Stack에 만들어진다.
			이 영역은 가장 작은 영역 중 하나로 
			많은 데이터를 한 번에 보관하기 힘듦
			==> 변수 생성을 요청하는 순간 변수를 생성하고 블럭이 닫히는 순간 데이터삭제.
				
		전역변수
		==> 클래스내의 어느곳이든지 사용할 수 있는 변수.
		
	주의 ]
		for(int i = 0; ; ){
			이 때 변수 i는 for문에 속한 지역변수가 됨..
			Because 블럭의 의미가 for명령의 실행범위이므로
			for명령에 속한 모든 변수는 블럭안에 있는 것으로 간주함.
		}
		
	참고 ] 
		중첩 for 명령
		==> for 명령 안의 for명령.
		
		**
		안쪽 for 명령은 바깥 for 명령이 반복되면
		처음부터 다시 실행된다.
		
		예 ] 
			for(int i = 0 ; i< 3 ; i++){
					실행내용1
				for(int j = 0 ; j < 5 ; j++){
						실행내용2
				}
			}
		
		해석 ] 
			i for문이 한 번 반복 할 때 j for문이 5번 반복됨
			
---------------------------------------------------------------------------------------------------------------------------------------------------

flag 기법
==> 우리가 프로그램을 실행하다보면
	두가지 이상의 경우가 발생되는 순간이 존재한다.
	그 후에 어떤경우가 발생했는지를 알아보는 기법.
	
	예 ]
	
		for(;;){
			break; // 이 명령이 실행되면  반복문이 종료된다.
		}
		
		문제는 for문 다음부분을 실행 할 때 정상적으로 종료되었는지
		break 명령에 의해 종료되었는지이다.
		
		확인방법 ] 
			1. 반복문이 시작하기 전에 변수를 만들어두고 특정 데이터도 초기화 해둔다.
			2. 특정 순간이 발생하면(break) 변수의 데이터를 변경한다.
			3. 반복문이 종료된 후 만들어둔 변수의 내용만 확인한다.